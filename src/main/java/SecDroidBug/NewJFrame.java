/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SecDroidBug;

import static SecDroidBug.NewJFrame.breakPoints;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.ForStmt;
import com.github.javaparser.ast.stmt.IfStmt;
import com.github.javaparser.ast.stmt.WhileStmt;
import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.TreeSet;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class NewJFrame extends javax.swing.JFrame {
static String fname;
ParserFinal parse;
Desbdesk2 debugCurrent;
static HashSet <Integer> methodEndLines;
static TreeSet <Integer> breakPoints;
  List <Integer> ifs_int;
        List <Integer> fors_int;
        List <Integer> whs_int;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable()/*{
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
                Component comp = super.prepareRenderer(renderer, row, col);
                Object value = getModel().getValueAt(row, col);
                System.out.println("missed "+row);
                if ((getSelectedRow() == row)&&(getSelectedColumn()==0)) {

                    comp.setBackground(Color.red);
                    System.out.println("collll "+row);
                }
                return comp;
            }
        }*/
        ;
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        tf1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setAutoscrolls(false);
        jTable1.setTableHeader(null);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton2.setBackground(new java.awt.Color(229, 92, 72));
        jButton2.setText("Start Debugging");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Sensitive variables");

        jButton1.setBackground(new java.awt.Color(24, 203, 24));
        jButton1.setText("Resume");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(238, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
      if((jTable1.columnAtPoint(evt.getPoint())==0))  
       {
        int r=jTable1.rowAtPoint(evt.getPoint());
       
        if(parse.nodesByLine.keySet().contains(r+1)||methodEndLines.contains(r+1)||ifs_int.contains(r+1)||fors_int.contains(r+1)||whs_int.contains(r+1))
        {
            if(breakPoints.contains(r+1))
            {
               breakPoints.remove(r+1);
            }
            else
            {
                breakPoints.add(r+1);
            }
        }
       }
      jTable1.repaint();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.jButton2.setEnabled(false);
        new th().start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jButton1.setEnabled(false);
        debugCurrent.vm.resume();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BufferedReader br=null;
                try {
                    NewJFrame mm=new NewJFrame();
                    JFileChooser jf=new JFileChooser();
                    DefaultTableModel dm = (DefaultTableModel)mm.jTable1.getModel();
                    TableColumn tc=mm.jTable1.getColumnModel().getColumn(1);
                    TableColumn tc0=mm.jTable1.getColumnModel().getColumn(0);        
                    jf.showOpenDialog(null);
                    File ff=jf.getSelectedFile(); 
                    //System.out.println(ff.getAbsolutePath());
                    String path=ff.getAbsolutePath();
                    fname=fname=ff.getName().split("\\.")[0];
                    mm.parse=new ParserFinal(path);
                    mm.setAllowedeBreakpoints();
                    methodEndLines=new HashSet<>();
                    breakPoints=new TreeSet<>();
                    for(MethodDeclaration methd:mm.parse.cu.findAll(MethodDeclaration.class))
                    {
                        methodEndLines.add(methd.getEnd().get().line);
                    }
                    br = new BufferedReader(new FileReader(path));
                    String hh=null;
                    int c=1;
                    while((hh=br.readLine())!=null)
                    {
                        dm.addRow(new String[]{String.valueOf(c),hh});
                        c++;
                    }
                    tc0.setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                       setText(value.toString());
                       if(breakPoints.contains(row+1))
                       {
                            setBackground(new Color(255, 153, 153)); 
                       }
                       else if(isSelected)
                       {     
                         setBackground(new Color(0, 153, 204));  
                       }
                        else if((row%2)==0){
                          setBackground(Color.white);  
                        }
                        else{
                          setBackground(new Color(240,240,240));  
                        }
                        return this;
                    }
                }
            );
                          tc.setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                       setText(value.toString());
                       if(breakPoints.contains(row+1))
                       {
                            setBackground(new Color(255, 153, 153)); 
                       }
                       else if(isSelected)
                       {     
                         setBackground(new Color(0, 153, 204));  
                       }
                        else if((row%2)==0){
                          setBackground(Color.white);  
                        }
                        else{
                          setBackground(new Color(240,240,240));  
                        }
                        return this;
                    }
                }
            );
                /*      tc.setCellRenderer(new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                         if(row==27)
                       {
                        setText(value.toString());
                        setBackground(new Color(244, 66, 66));
                       }
                        return this;
                    }
                }
            );*/
                    JTable table =mm.jTable1;
                    int mx=1000;
                    // code for enabling horizontal scrolling
                     for (int row = 0; row < table.getRowCount(); row++)
                    {
                        TableCellRenderer cellRenderer = table.getCellRenderer(row,1);
                        Component cm = table.prepareRenderer(cellRenderer, row, 1);
                        int width = cm.getPreferredSize().width + table.getIntercellSpacing().width;
                        if(width>mx)
                        {
                            mx=width;
                        }
                    }
                    tc.setPreferredWidth(mx);                   
                    //System.out.println(tc.getPreferredWidth());
                    mm.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } 
            }
        });
    }
    void setAllowedeBreakpoints()
    {
        List <IfStmt>ifs=parse.cu.findAll(IfStmt.class);
        List <ForStmt>fors=parse.cu.findAll(ForStmt.class);
        List <WhileStmt>whs=parse.cu.findAll(WhileStmt.class);
        
        ifs_int=new ArrayList<>();
        fors_int=new ArrayList<>();
        whs_int=new ArrayList<>();
        for(IfStmt cur:ifs)
        {
            ifs_int.add(cur.getBegin().get().line);
        }
         for(ForStmt cur:fors)
        {
            fors_int.add(cur.getBegin().get().line);
        }
          for(WhileStmt cur:whs)
        {
            whs_int.add(cur.getBegin().get().line);
        }
    }
    class th extends Thread
    {
        @Override
        public void run() {
            parse.watchVariables=tf1.getText().trim();
            debugCurrent=new Desbdesk2(NewJFrame.this,getClassName(),breakPoints,tf1.getText(),parse);
            debugCurrent.dis();
        }
        
        public String getClassName()
        {
            CompilationUnit temp=parse.cu;
            ClassOrInterfaceDeclaration classDebug=temp.findFirst(ClassOrInterfaceDeclaration.class,new Predicate<ClassOrInterfaceDeclaration>() {
                @Override
                public boolean test(ClassOrInterfaceDeclaration t) {
                    int start=t.getBegin().get().line;
                    int end=t.getEnd().get().line;
                    if((start<=breakPoints.first())&&(breakPoints.last()<=end))        
                    {
                        return true;
                    }
                    return false;
                }
            }).get();
            String completeClassname=temp.getPackageDeclaration().get().getNameAsString()+"."+classDebug.getNameAsString();
            System.out.println(completeClassname);
            return completeClassname;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tf1;
    // End of variables declaration//GEN-END:variables
}
